<?php

/**
 * @file
 * Provides a toolset for dunning management.
 */

/**
 * Implements hook_commerce_order_status_info().
 */
function commerce_dunning_commerce_order_status_info() {
  return array(
    'dunning_past_due' => array(
      'name' => 'dunning_past_due',
      'title' => t('Past due'),
      'state' => 'canceled',
    ),
  );
}

/**
 * Retrieves scheduled tasks related to the dunning process.
 *
 * Returns all tasks scheduled by Rules Scheduler that are related to a certain
 * order if that's specified.
 *
 * Rules Scheduler only assigns a unique string identifier to the tasks, so we
 * need to use a pattern that designates that a tasks belongs to the dunning
 * process and also tells the ID of the order. The established pattern is:
 *
 * dunning-[order id]-[short action description]
 *
 * Short action description can also contain a variable, for example the number
 * of days after a certain action should be evaluated in the dunning process.
 * E.g.: dunning-22-charge-attempt-2-days
 */
function commerce_dunning_get_scheduled_tasks($order_id = NULL) {
  $return = array();
  $result = db_select('rules_scheduler', 'r')
    ->fields('r', array('tid', 'config', 'date', 'identifier'))
    ->condition('identifier', 'dunning-' . $order_id . '%', 'LIKE')
    ->orderBy('tid')
    ->execute();
  foreach ($result as $task) {
    $return[$task->tid] = array(
      'config' => $task->config,
      'date' => $task->date,
      'identifier' => $task->identifier,
    );
  }
  return $return;
}
